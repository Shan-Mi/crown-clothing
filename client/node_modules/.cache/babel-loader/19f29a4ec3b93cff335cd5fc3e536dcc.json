{"ast":null,"code":"import { createSelector } from \"reselect\"; // 1. input select: doesn't use create selector\n// 2. output select: does use input selectors and creates selector to build themselves\n// take the whole state and select just piece of it, only one layer deep usually\n// here we just want to get state's property cart\n\nconst selectCart = state => state.cart; // export the property of cart, if we take multiple properties, then we have to make sure the second parameter is corresponsive with the first parameter.\n// now it is a memoized selector\n\n\nexport const selectCartItems = createSelector([selectCart], cart => cart.cartItems);\nexport const selectHidden = createSelector([selectCart], cart => cart.hidden);\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity, 0));\nexport const selectCartTotal = createSelector([sele]);","map":{"version":3,"sources":["C:/Users/Shan/Develop/crown-clothing/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectHidden","hidden","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity","selectCartTotal","sele"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;AACA;AAEA;AACA;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC,C,CAEA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,CAC3C,CAACC,UAAD,CAD2C,EAE1CE,IAAD,IAAUA,IAAI,CAACE,SAF4B,CAAtC;AAKP,OAAO,MAAMC,YAAY,GAAGN,cAAc,CAAC,CAACC,UAAD,CAAD,EAAgBE,IAAD,IAAUA,IAAI,CAACI,MAA9B,CAAnC;AAEP,OAAO,MAAMC,oBAAoB,GAAGR,cAAc,CAChD,CAACI,eAAD,CADgD,EAE/CC,SAAD,IACEA,SAAS,CAACI,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACED,mBAAmB,GAAGC,QAAQ,CAACC,QAFnC,EAGE,CAHF,CAH8C,CAA3C;AAUP,OAAO,MAAMC,eAAe,GAAGb,cAAc,CAC3C,CAACc,IAAD,CAD2C,CAAtC","sourcesContent":["import { createSelector } from \"reselect\";\n\n// 1. input select: doesn't use create selector\n// 2. output select: does use input selectors and creates selector to build themselves\n\n// take the whole state and select just piece of it, only one layer deep usually\n// here we just want to get state's property cart\nconst selectCart = (state) => state.cart;\n\n// export the property of cart, if we take multiple properties, then we have to make sure the second parameter is corresponsive with the first parameter.\n// now it is a memoized selector\nexport const selectCartItems = createSelector(\n  [selectCart],\n  (cart) => cart.cartItems\n);\n\nexport const selectHidden = createSelector([selectCart], (cart) => cart.hidden);\n\nexport const selectCartItemsCount = createSelector(\n  [selectCartItems],\n  (cartItems) =>\n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity,\n      0\n    )\n);\n\nexport const selectCartTotal = createSelector(\n  [sele]\n)"]},"metadata":{},"sourceType":"module"}