{"ast":null,"code":"import{createSelector}from\"reselect\";// 1. input select: doesn't use create selector\n// 2. output select: does use input selectors and creates selector to build themselves\n// take the whole state and select just piece of it, only one layer deep usually\n// here we just want to get state's property cart\nvar selectCart=function selectCart(state){return state.cart;};// export the property of cart, if we take multiple properties, then we have to make sure the second parameter is corresponsive with the first parameter.\n// now it is a memoized selector\nexport var selectCartItems=createSelector([selectCart],function(cart){return cart.cartItems;});export var selectHidden=createSelector([selectCart],function(cart){return cart.hidden;});export var selectCartItemsCount=createSelector([selectCartItems],function(cartItems){return cartItems.reduce(function(accumulatedQuantity,cartItem){return accumulatedQuantity+cartItem.quantity;},0);});export var selectCartTotal=createSelector([selectCartItems],function(cartItems){return cartItems.reduce(function(accumulatedQuantity,cartItem){return accumulatedQuantity+cartItem.quantity*cartItem.price;},0);});","map":{"version":3,"sources":["C:/Users/Shan/Develop/crown-clothing/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectHidden","hidden","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity","selectCartTotal","price"],"mappings":"AAAA,OAASA,cAAT,KAA+B,UAA/B,CAEA;AACA;AAEA;AACA;AACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAjB,EAAnB,CAEA;AACA;AACA,MAAO,IAAMC,CAAAA,eAAe,CAAGJ,cAAc,CAC3C,CAACC,UAAD,CAD2C,CAE3C,SAACE,IAAD,QAAUA,CAAAA,IAAI,CAACE,SAAf,EAF2C,CAAtC,CAKP,MAAO,IAAMC,CAAAA,YAAY,CAAGN,cAAc,CAAC,CAACC,UAAD,CAAD,CAAe,SAACE,IAAD,QAAUA,CAAAA,IAAI,CAACI,MAAf,EAAf,CAAnC,CAEP,MAAO,IAAMC,CAAAA,oBAAoB,CAAGR,cAAc,CAChD,CAACI,eAAD,CADgD,CAEhD,SAACC,SAAD,QACEA,CAAAA,SAAS,CAACI,MAAV,CACE,SAACC,mBAAD,CAAsBC,QAAtB,QACED,CAAAA,mBAAmB,CAAGC,QAAQ,CAACC,QADjC,EADF,CAGE,CAHF,CADF,EAFgD,CAA3C,CAUP,MAAO,IAAMC,CAAAA,eAAe,CAAGb,cAAc,CAAC,CAACI,eAAD,CAAD,CAAoB,SAACC,SAAD,QAC/DA,CAAAA,SAAS,CAACI,MAAV,CACE,SAACC,mBAAD,CAAsBC,QAAtB,QACED,CAAAA,mBAAmB,CAAGC,QAAQ,CAACC,QAAT,CAAoBD,QAAQ,CAACG,KADrD,EADF,CAGE,CAHF,CAD+D,EAApB,CAAtC","sourcesContent":["import { createSelector } from \"reselect\";\n\n// 1. input select: doesn't use create selector\n// 2. output select: does use input selectors and creates selector to build themselves\n\n// take the whole state and select just piece of it, only one layer deep usually\n// here we just want to get state's property cart\nconst selectCart = (state) => state.cart;\n\n// export the property of cart, if we take multiple properties, then we have to make sure the second parameter is corresponsive with the first parameter.\n// now it is a memoized selector\nexport const selectCartItems = createSelector(\n  [selectCart],\n  (cart) => cart.cartItems\n);\n\nexport const selectHidden = createSelector([selectCart], (cart) => cart.hidden);\n\nexport const selectCartItemsCount = createSelector(\n  [selectCartItems],\n  (cartItems) =>\n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity,\n      0\n    )\n);\n\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce(\n    (accumulatedQuantity, cartItem) =>\n      accumulatedQuantity + cartItem.quantity * cartItem.price,\n    0\n  )\n);\n"]},"metadata":{},"sourceType":"module"}