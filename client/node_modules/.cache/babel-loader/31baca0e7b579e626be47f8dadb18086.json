{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBmt190S13Po1z2n_cz03BQTMoFKgRqhxs\",\n  authDomain: \"crown-db-59102.firebaseapp.com\",\n  databaseURL: \"https://crown-db-59102.firebaseio.com\",\n  projectId: \"crown-db-59102\",\n  storageBucket: \"crown-db-59102.appspot.com\",\n  messagingSenderId: \"211607986071\",\n  appId: \"1:211607986071:web:0dfc930ec7343c2f9eaed2\",\n  measurementId: \"G-VDWWFJBJER\"\n}; // This is async\n// If not log-in, userAuth === null\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // if there is no user, exit the function\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // get user reference at that location\n\n  const snapShot = await userRef.get(); // console.log(snapShot);\n\n  if (!snapShot) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); // check if there is any data, if no data, we create one new user\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef; // we need userRef\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Shan/Develop/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,gCAFS;AAGrBC,EAAAA,WAAW,EAAE,uCAHQ;AAIrBC,EAAAA,SAAS,EAAE,gBAJU;AAKrBC,EAAAA,aAAa,EAAE,4BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB,C,CAWA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe,OAD4D,CACpD;;AAEvB,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAH2E,CAI3E;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAL2E,CAO3E;;AAEA,MAAI,CAACD,QAAL,EAAe;AACb,UAAM;AAAEE,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBT,QAA/B;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB,CAFa,CAGb;;AACA,QAAI;AACF,YAAMT,OAAO,CAACU,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGT;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOY,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOd,OAAP,CAzB2E,CAyB3D;AACjB,CA1BM;AA4BPb,QAAQ,CAAC4B,aAAT,CAAuB3B,cAAvB;AAEA,OAAO,MAAM4B,IAAI,GAAG7B,QAAQ,CAAC6B,IAAT,EAAb;AACP,OAAO,MAAMf,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMgB,QAAQ,GAAG,IAAI9B,QAAQ,CAAC6B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe9B,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBmt190S13Po1z2n_cz03BQTMoFKgRqhxs\",\n  authDomain: \"crown-db-59102.firebaseapp.com\",\n  databaseURL: \"https://crown-db-59102.firebaseio.com\",\n  projectId: \"crown-db-59102\",\n  storageBucket: \"crown-db-59102.appspot.com\",\n  messagingSenderId: \"211607986071\",\n  appId: \"1:211607986071:web:0dfc930ec7343c2f9eaed2\",\n  measurementId: \"G-VDWWFJBJER\",\n};\n\n// This is async\n// If not log-in, userAuth === null\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // if there is no user, exit the function\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); \n  // get user reference at that location\n  const snapShot = await userRef.get();\n\n  // console.log(snapShot);\n\n  if (!snapShot) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    // check if there is any data, if no data, we create one new user\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef; // we need userRef\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}