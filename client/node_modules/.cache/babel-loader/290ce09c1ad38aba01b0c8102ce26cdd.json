{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shan\\\\Develop\\\\crown-clothing\\\\src\\\\components\\\\cart-dropdown\\\\cart-dropdown.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router-dom\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport CartItem from \"../cart-item/cart-item.component\";\nimport { selectCartItems } from \"../../redux/cart/cart.selectors.js\";\nimport { toggleCartHidden } from \"../../redux/cart/cart.actions.js\"; // import \"./cart-dropdown.styles.scss\";\n\nimport { CartDropdownContainer, CartDropdownButton, CartItemsContainer, EmptyMessageContainer } from \"./cart-dropdown.styles\"; // 1. By default, a connected component receives props.dispatch and can dispatch actions itself.\n// 2. connect can accept an argument called mapDispatchToProps, which lets you create functions that dispatch when called, and pass those functions as props to your component.\n// Providing a mapDispatchToProps allows you to specify which actions your component might need to dispatch. It lets you provide action dispatching functions as props. Therefore, instead of calling props.dispatch(() => increment()), you may call props.increment() directly.\n\nconst CartDropdown = ({\n  cartItems,\n  history,\n  dispatch\n}) => /*#__PURE__*/React.createElement(CartDropdownContainer, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"cart-items\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }\n}, cartItems.length ? cartItems.map(cartItem => /*#__PURE__*/React.createElement(CartItem, {\n  key: cartItem.id,\n  item: cartItem,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 11\n  }\n})) : /*#__PURE__*/React.createElement(EmptyMessageContainer, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }\n}, \"Your cart is empty\")), /*#__PURE__*/React.createElement(CustomButton, {\n  onClick: () => {\n    history.push(\"/checkout\");\n    dispatch(toggleCartHidden());\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }\n}, \"GO TO CHECKOUT\"));\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems\n});\nexport default withRouter(connect(mapStateToProps)(CartDropdown)); // connect will pass the second parameter -  mapDispatchToProps by default, we can use dispatch directly","map":{"version":3,"sources":["C:/Users/Shan/Develop/crown-clothing/src/components/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","connect","createStructuredSelector","withRouter","CustomButton","CartItem","selectCartItems","toggleCartHidden","CartDropdownContainer","CartDropdownButton","CartItemsContainer","EmptyMessageContainer","CartDropdown","cartItems","history","dispatch","length","map","cartItem","id","push","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,gBAAT,QAAiC,kCAAjC,C,CAEA;;AACA,SACEC,qBADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,qBAJF,QAKO,wBALP,C,CAOA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,kBACnB,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAK,EAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGF,SAAS,CAACG,MAAV,GACCH,SAAS,CAACI,GAAV,CAAeC,QAAD,iBACZ,oBAAC,QAAD;AAAU,EAAA,GAAG,EAAEA,QAAQ,CAACC,EAAxB;AAA4B,EAAA,IAAI,EAAED,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADD,gBAKC,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ,CADF,eAUE,oBAAC,YAAD;AACE,EAAA,OAAO,EAAE,MAAM;AACbJ,IAAAA,OAAO,CAACM,IAAR,CAAa,WAAb;AACAL,IAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;AACD,GAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,CADF;;AAqBA,MAAMc,eAAe,GAAGnB,wBAAwB,CAAC;AAC/CW,EAAAA,SAAS,EAAEP;AADoC,CAAD,CAAhD;AAIA,eAAeH,UAAU,CAACF,OAAO,CAACoB,eAAD,CAAP,CAAyBT,YAAzB,CAAD,CAAzB,C,CACA","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router-dom\";\n\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport CartItem from \"../cart-item/cart-item.component\";\nimport { selectCartItems } from \"../../redux/cart/cart.selectors.js\";\nimport { toggleCartHidden } from \"../../redux/cart/cart.actions.js\";\n\n// import \"./cart-dropdown.styles.scss\";\nimport {\n  CartDropdownContainer,\n  CartDropdownButton,\n  CartItemsContainer,\n  EmptyMessageContainer,\n} from \"./cart-dropdown.styles\";\n\n// 1. By default, a connected component receives props.dispatch and can dispatch actions itself.\n// 2. connect can accept an argument called mapDispatchToProps, which lets you create functions that dispatch when called, and pass those functions as props to your component.\n// Providing a mapDispatchToProps allows you to specify which actions your component might need to dispatch. It lets you provide action dispatching functions as props. Therefore, instead of calling props.dispatch(() => increment()), you may call props.increment() directly.\nconst CartDropdown = ({ cartItems, history, dispatch }) => (\n  <CartDropdownContainer>\n    <div className=\"cart-items\">\n      {cartItems.length ? (\n        cartItems.map((cartItem) => (\n          <CartItem key={cartItem.id} item={cartItem} />\n        ))\n      ) : (\n        <EmptyMessageContainer>Your cart is empty</EmptyMessageContainer>\n      )}\n    </div>\n    <CustomButton\n      onClick={() => {\n        history.push(\"/checkout\");\n        dispatch(toggleCartHidden());\n      }}>\n      GO TO CHECKOUT\n    </CustomButton>\n  </CartDropdownContainer>\n);\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems,\n});\n\nexport default withRouter(connect(mapStateToProps)(CartDropdown));\n// connect will pass the second parameter -  mapDispatchToProps by default, we can use dispatch directly\n"]},"metadata":{},"sourceType":"module"}