{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Shan\\\\Develop\\\\crown-clothing\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"C:\\\\Users\\\\Shan\\\\Develop\\\\crown-clothing\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:\\\\Users\\\\Shan\\\\Develop\\\\crown-clothing\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import firebase from\"firebase/app\";import\"firebase/firestore\";import\"firebase/auth\";var firebaseConfig={apiKey:\"AIzaSyBmt190S13Po1z2n_cz03BQTMoFKgRqhxs\",authDomain:\"crown-db-59102.firebaseapp.com\",databaseURL:\"https://crown-db-59102.firebaseio.com\",projectId:\"crown-db-59102\",storageBucket:\"crown-db-59102.appspot.com\",messagingSenderId:\"211607986071\",appId:\"1:211607986071:web:0dfc930ec7343c2f9eaed2\",measurementId:\"G-VDWWFJBJER\"};// This is async\n// If not log-in, userAuth === null\n// both of userAuth and additionalData are objects, additionalData is any possible incoming data object\nexport var createUserProfileDocument=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAuth,additionalData){var userRef,snapShot,displayName,email,createdAt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(userAuth){_context.next=2;break;}return _context.abrupt(\"return\");case 2:// if there is no user, exit the function\n// we only save to our db if we get back a user of obj, which means they signed in\n// const userRef = firestore.doc('user/12cadgadg'); \nuserRef=firestore.doc(\"users/\".concat(userAuth.uid));// get user reference at that location, if user exists\n_context.next=5;return userRef.get();case 5:snapShot=_context.sent;if(snapShot.exists){_context.next=17;break;}displayName=userAuth.displayName,email=userAuth.email;createdAt=new Date();// check if there is any data, if no data, we create one new user\n_context.prev=9;_context.next=12;return userRef.set(_objectSpread({displayName:displayName,email:email,createdAt:createdAt},additionalData));case 12:_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](9);console.log(\"error creating user\",_context.t0.message);case 17:return _context.abrupt(\"return\",userRef);case 18:case\"end\":return _context.stop();}}},_callee,null,[[9,14]]);}));return function createUserProfileDocument(_x,_x2){return _ref.apply(this,arguments);};}();firebase.initializeApp(firebaseConfig);export var auth=firebase.auth();export var firestore=firebase.firestore();var provider=new firebase.auth.GoogleAuthProvider();provider.setCustomParameters({prompt:\"select_account\"});export var signInWithGoogle=function signInWithGoogle(){return auth.signInWithPopup(provider);};export default firebase;","map":{"version":3,"sources":["C:/Users/Shan/Develop/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","get","snapShot","exists","displayName","email","createdAt","Date","set","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"weAAA,MAAOA,CAAAA,QAAP,KAAqB,cAArB,CACA,MAAO,oBAAP,CACA,MAAO,eAAP,CAEA,GAAMC,CAAAA,cAAc,CAAG,CACrBC,MAAM,CAAE,yCADa,CAErBC,UAAU,CAAE,gCAFS,CAGrBC,WAAW,CAAE,uCAHQ,CAIrBC,SAAS,CAAE,gBAJU,CAKrBC,aAAa,CAAE,4BALM,CAMrBC,iBAAiB,CAAE,cANE,CAOrBC,KAAK,CAAE,2CAPc,CAQrBC,aAAa,CAAE,cARM,CAAvB,CAWA;AACA;AACA;AACA,MAAO,IAAMC,CAAAA,yBAAyB,0FAAG,iBAAOC,QAAP,CAAiBC,cAAjB,sKAClCD,QADkC,iEAChB;AACvB;AAEA;AACME,OALiC,CAKvBC,SAAS,CAACC,GAAV,iBAAuBJ,QAAQ,CAACK,GAAhC,EALuB,CAMvC;AANuC,sBAOhBH,CAAAA,OAAO,CAACI,GAAR,EAPgB,QAOjCC,QAPiC,kBAWlCA,QAAQ,CAACC,MAXyB,0BAY7BC,WAZ6B,CAYNT,QAZM,CAY7BS,WAZ6B,CAYhBC,KAZgB,CAYNV,QAZM,CAYhBU,KAZgB,CAa/BC,SAb+B,CAanB,GAAIC,CAAAA,IAAJ,EAbmB,CAcrC;AAdqC,uCAgB7BV,CAAAA,OAAO,CAACW,GAAR,gBACJJ,WAAW,CAAXA,WADI,CAEJC,KAAK,CAALA,KAFI,CAGJC,SAAS,CAATA,SAHI,EAIDV,cAJC,EAhB6B,0FAuBnCa,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAmC,YAAMC,OAAzC,EAvBmC,wCA2BhCd,OA3BgC,uEAAH,kBAAzBH,CAAAA,yBAAyB,gDAA/B,CA+BPV,QAAQ,CAAC4B,aAAT,CAAuB3B,cAAvB,EAEA,MAAO,IAAM4B,CAAAA,IAAI,CAAG7B,QAAQ,CAAC6B,IAAT,EAAb,CACP,MAAO,IAAMf,CAAAA,SAAS,CAAGd,QAAQ,CAACc,SAAT,EAAlB,CAEP,GAAMgB,CAAAA,QAAQ,CAAG,GAAI9B,CAAAA,QAAQ,CAAC6B,IAAT,CAAcE,kBAAlB,EAAjB,CACAD,QAAQ,CAACE,mBAAT,CAA6B,CAAEC,MAAM,CAAE,gBAAV,CAA7B,EACA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,SAAML,CAAAA,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAAN,EAAzB,CAEP,cAAe9B,CAAAA,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBmt190S13Po1z2n_cz03BQTMoFKgRqhxs\",\n  authDomain: \"crown-db-59102.firebaseapp.com\",\n  databaseURL: \"https://crown-db-59102.firebaseio.com\",\n  projectId: \"crown-db-59102\",\n  storageBucket: \"crown-db-59102.appspot.com\",\n  messagingSenderId: \"211607986071\",\n  appId: \"1:211607986071:web:0dfc930ec7343c2f9eaed2\",\n  measurementId: \"G-VDWWFJBJER\",\n};\n\n// This is async\n// If not log-in, userAuth === null\n// both of userAuth and additionalData are objects, additionalData is any possible incoming data object\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // if there is no user, exit the function\n  // we only save to our db if we get back a user of obj, which means they signed in\n\n  // const userRef = firestore.doc('user/12cadgadg'); \n  const userRef = firestore.doc(`users/${userAuth.uid}`); \n  // get user reference at that location, if user exists\n  const snapShot = await userRef.get();\n  // .get() - get a snapshot from db\n  // console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    // check if there is any data, if no data, we create one new user\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef; // we need userRef\n  // create a snapshot\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}